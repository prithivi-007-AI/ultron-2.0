import os
import time
import pyttsx3
import speech_recognition as sr
import pywhatkit
import pyautogui
from transformers import GPT2LMHeadModel, GPT2Tokenizer
import torch

# Initialize text-to-speech engine
engine = pyttsx3.init()

# Initialize speech recognizer
recognizer = sr.Recognizer()

# Load GPT-2 model for casual conversations
def load_model():
    print("Loading GPT-2 model...")
    model_name = "gpt2"
    tokenizer = GPT2Tokenizer.from_pretrained(model_name)
    model = GPT2LMHeadModel.from_pretrained(model_name)
    return model, tokenizer

model, tokenizer = load_model()

# Function to generate responses using GPT-2
def generate_response(prompt):
    inputs = tokenizer.encode(prompt, return_tensors="pt")
    outputs = model.generate(
        inputs,
        max_length=50,
        num_return_sequences=1,
        no_repeat_ngram_size=2,
        pad_token_id=tokenizer.eos_token_id
    )
    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    return response

# Function to speak text
def speak(text):
    print(f"Assistant: {text}")
    engine.say(text)
    engine.runAndWait()

# Function to listen to user input
def listen():
    with sr.Microphone() as source:
        print("Listening...")
        recognizer.adjust_for_ambient_noise(source)
        audio = recognizer.listen(source)

        try:
            command = recognizer.recognize_google(audio)
            print(f"You: {command}")
            return command.lower()
        except sr.UnknownValueError:
            speak("Sorry, I didn't catch that. Can you repeat?")
            return None
        except sr.RequestError:
            speak("Sorry, my speech service is down.")
            return None

# Function to play YouTube videos
def play_youtube_video(query):
    speak(f"Playing {query} on YouTube.")
    pywhatkit.playonyt(query)

# Function to change PowerPoint slides
def change_slide(direction):
    if direction == "next":
        pyautogui.press("right")
        speak("Next slide.")
    elif direction == "previous":
        pyautogui.press("left")
        speak("Previous slide.")
    else:
        speak("Invalid slide direction.")

# Function to handle casual conversations
def casual_conversation(query):
    response = generate_response(query)
    speak(response)

# Function to save chat history
def save_chat_history(query, response):
    with open("chat_history.txt", "a") as file:
        file.write(f"You: {query}\n")
        file.write(f"Assistant: {response}\n\n")

# Function to retrieve chat history
def retrieve_chat_history(query):
    if not os.path.exists("chat_history.txt"):
        return None

    with open("chat_history.txt", "r") as file:
        lines = file.readlines()
        for i, line in enumerate(lines):
            if query.lower() in line.lower():
                return lines[i + 1].strip()  # Return the assistant's response
    return None

# Main function to run the voice assistant
def main():
    speak("Hello! I am your personal AI assistant. How can I help you today?")
    while True:
        command = listen()

        if command:
            # Check for specific commands
            if "play" in command and "youtube" in command:
                query = command.replace("play", "").replace("on youtube", "").strip()
                play_youtube_video(query)

            elif "next slide" in command:
                change_slide("next")

            elif "previous slide" in command:
                change_slide("previous")

            elif "exit" in command or "stop" in command:
                speak("Goodbye! Have a great day.")
                break

            elif "remember" in command:
                # Retrieve old chat history
                query = command.replace("remember", "").strip()
                response = retrieve_chat_history(query)
                if response:
                    speak(f"I remember you asked: {response}")
                else:
                    speak("Sorry, I couldn't find that in my memory.")

            else:
                # Casual conversation
                response = generate_response(command)
                speak(response)
                save_chat_history(command, response)  # Save chat history

if __name__ == "__main__":
    main()
